*comment_repl_docs.txt*     For Neovim >= 0.8.0     Last change: 2024 April 14

==============================================================================
Table of Contents                        *comment_repl_docs-table-of-contents*

1. Comment-REPL.nvim                     |comment_repl_docs-comment-repl.nvim|
  - How does it work    |comment_repl_docs-comment-repl.nvim-how-does-it-work|
  - Installation            |comment_repl_docs-comment-repl.nvim-installation|
  - Configuration          |comment_repl_docs-comment-repl.nvim-configuration|
  - Commands                    |comment_repl_docs-comment-repl.nvim-commands|
2. Links                                             |comment_repl_docs-links|

==============================================================================
1. Comment-REPL.nvim                     *comment_repl_docs-comment-repl.nvim*



A neovim plugin that allows you to run code in a REPL without ever leaving your
buffer. Output from the REPL is printed as a comment below the executed code.

Can be used as an extremely simplified Jupyter Notebook experience.


HOW DOES IT WORK        *comment_repl_docs-comment-repl.nvim-how-does-it-work*

`:CommentREPLExecute` will run the code cell at your cursor and print the
output as a comment. Thatâ€™s it!


INSTALLATION                *comment_repl_docs-comment-repl.nvim-installation*

Using lazy.nvim:

>lua
    {
      'atinylittleshell/comment-repl.nvim',
      opts = {},
    }
<


CONFIGURATION              *comment_repl_docs-comment-repl.nvim-configuration*

See config.lua <lua/comment-repl/config.lua> for config schema and default
values.

Python is the only language supported by default, but you can add support for
other REPLs through configuration.


COMMANDS                        *comment_repl_docs-comment-repl.nvim-commands*

`:CommentREPLExecute` - Run the code cell at the cursor and print the output as
a comment.

`:CommentREPLLog` - View logs from Comment-REPL.nvim.

>lua
    -- By default the plugin will not enable any key bindings.
    -- Your can define your own keybind behavior like below.
    vim.keymap.set('n', '<leader>ce', '<cmd>CommentREPLExecute<CR>')
    vim.keymap.set('n', '<leader>cl', '<cmd>CommentREPLLog<CR>')
<

==============================================================================
2. Links                                             *comment_repl_docs-links*

1. *GitHub Workflow Status*: https://img.shields.io/github/actions/workflow/status/atinylittleshell/comment-repl.nvim/lint_test.yml?branch=main&style=for-the-badge
2. *Lua*: https://img.shields.io/badge/Made%20with%20Lua-blueviolet.svg?style=for-the-badge&logo=lua
3. *Screenshot*: doc/screenshot.png?raw=true

Generated by panvimdoc <https://github.com/kdheepak/panvimdoc>

vim:tw=78:ts=8:noet:ft=help:norl:
